1. Why to learn React ?
Industry demand – React is one of the most widely used frontend technologies for building modern web applications (used by Facebook, Instagram, Netflix, Airbnb, etc.).
Reusable components – Build once, reuse everywhere → reduces development time.
Virtual DOM – Efficient UI updates without reloading the whole page → fast performance.
Rich ecosystem – Tons of libraries, tools, and community support.
Career opportunities – Increases job prospects for frontend, full-stack, and mobile developers.

2. When should we get stated with React?
A good grasp of HTML, CSS, and JavaScript (ES6+).
Basic understanding of DOM manipulation and functions in JS.
Once you’re comfortable with JavaScript fundamentals, you’re ready for React.

3. React learning approach?
JavaScript basics → ES6+ features (arrow functions, promises, async/await, destructuring).
React fundamentals → Components, JSX, Props, State.
Core concepts → Events, Conditional Rendering, Lists & Keys, Forms.
Hooks → useState, useEffect, useContext, custom hooks.
Routing → React Router.
State management → Context API, Redux, or Zustand.
APIs & Data fetching → Fetch, Axios, useEffect integration.
Advanced → Performance optimization, Suspense, Server Components.
Projects → Build real apps (e.g., todo app, e-commerce, Netflix clone).


4. React is a library?
Yes ✅ React is a JavaScript library for building user interfaces.
Not a full framework (like Angular).
Provides the View (UI) layer only, and you combine it with other libraries (e.g., Redux, React Router) for complete apps.


5. Core Concept of React ? 
Components → Building blocks of UI (reusable).
JSX → JavaScript + HTML-like syntax.
Props → Pass data from parent to child.
State → Manage component data (changes over time).
Virtual DOM → Efficient rendering.
Hooks → Functional component features (state, lifecycle, context).


6. Additional Addons to React ?
React Router → Navigation & routing.
Redux / Zustand / MobX → State management.
Next.js → React framework for server-side rendering (SSR) & full-stack apps.
Material UI / Tailwind CSS → UI styling libraries.
React Native → Mobile app development using React.


7. After React ? 
    Next.js → Production-ready React framework with SSR, API routes, and performance optimization.
    TypeScript with React → Strongly typed React apps.
    React Native → Build Android & iOS apps with React.
    Backend → Node.js + Express + MongoDB/MySQL (to become full-stack).
    DevOps / Deployment → Learn about hosting (Vercel, Netlify, AWS, Docker).
